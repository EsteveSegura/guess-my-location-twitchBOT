<!DOCTYPE html>
<html lang="es">

<head>
     <meta charset="UTF-8">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <meta http-equiv="X-UA-Compatible" content="ie=edge">
     <link rel="stylesheet" href="./main.css">
     <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.0.2/leaflet.css">
     <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.11.2/css/all.min.css">
     <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/4.1.3/css/bootstrap.min.css">
     
     <title>Map!</title>
</head>

<body>
     <div id="map"></div>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
     <script src="https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.0.2/leaflet-src.js"></script>
     <script src="https://unpkg.com/axios/dist/axios.min.js"></script>
     <script>
          let lat = 40.416729;
          let long = -3.703339;
          (function (window, document, undefined) {
               L.Control.Custom = L.Control.extend({
                    version: '1.0.1',
                    options: {
                         position: 'topright',
                         id: '',
                         title: '',
                         classes: '',
                         content: '',
                         style: {},
                         datas: {},
                         events: {},
                    },
                    container: null,
                    onAdd: function (map) {
                         this.container = L.DomUtil.create('div');
                         this.container.id = this.options.id;
                         this.container.title = this.options.title;
                         this.container.className = this.options.classes;
                         this.container.innerHTML = this.options.content;

                         for (var option in this.options.style) {
                              this.container.style[option] = this.options.style[option];
                         }

                         for (var data in this.options.datas) {
                              this.container.dataset[data] = this.options.datas[data];
                         }

                         /* Prevent click events propagation to map */
                         L.DomEvent.disableClickPropagation(this.container);

                         /* Prevent right click event propagation to map */
                         L.DomEvent.on(this.container, 'contextmenu', function (ev) {
                              L.DomEvent.stopPropagation(ev);
                         });

                         /* Prevent scroll events propagation to map when cursor on the div */
                         L.DomEvent.disableScrollPropagation(this.container);

                         for (var event in this.options.events) {
                              L.DomEvent.on(this.container, event, this.options.events[event], this.container);
                         }

                         return this.container;
                    },

                    onRemove: function (map) {
                         for (var event in this.options.events) {
                              L.DomEvent.off(this.container, event, this.options.events[event], this.container);
                         }
                    },
               });

               L.control.custom = function (options) {
                    return new L.Control.Custom(options);
               };

          }(window, document));

          function send() {
               axios.post('http://localhost:3000/makeguess', {
                    lat: lat,
                    long: long
               }).then(function (response) {
                    console.log(response);
               }).catch(function (error) {
                    console.log(error);
               });
          }

          /* -------------------- */
          $(document).ready(function () {

               let map = L.map('map').setView([40.416729, -3.703339], 16);
               let marker = L.marker([40.416729, -3.703339]).addTo(map);
               map.on('click', function (e) {
                    map.removeLayer(marker)
                    marker = L.marker([e.latlng.lat, e.latlng.lng]).addTo(map);
                    lat = e.latlng.lat;
                    long = e.latlng.lng;
               });
               map.zoomControl.setPosition('bottomright');

               L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                    maxZoom: 19,
                    attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
               }).addTo(map);

               L.control.custom({
                    position: 'topleft',
                    content: '<div class="panel-body">' +
                         '    <div class="panel-text">' +
                         '        <button id="goMap" onclick="send()"> Make my guess </button>' +
                         '    </div>' +
                         '</div>',
                    classes: 'location-infobox',
                    style:
                    {
                         //width: '200px',
                         margin: '10px',
                         padding: '10px 10px',
                         background: '#fff',
                    },
               }).addTo(map);
          });
     </script>
</body>

</html>